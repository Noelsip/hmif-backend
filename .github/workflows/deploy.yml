name: Deploy to VPS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 🚀 Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: 22
          timeout: 90s
          command_timeout: 20m
          script: |
            set -e
            echo "🔄 Starting deployment process..."
            
            # Navigate to project directory
            cd ${{ secrets.VPS_PATH }}
            
            # Show current status
            echo "📍 Current directory: $(pwd)"
            echo "🌿 Current branch: $(git branch --show-current)"
            echo "📝 Last commit: $(git log -1 --oneline)"
            
            # Check available disk space and memory
            echo "💾 Disk space:"
            df -h
            echo "🧠 Memory usage:"
            free -h
            
            # Stash any local changes
            git stash -u 2>/dev/null || true
            
            # Pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main
            
            # Create/update .env.production.local with REAL values
            echo "📝 Creating/updating .env.production.local with production values..."
            cat > .env.production.local << EOF
            DUCKDNS_DOMAIN=${{ secrets.DUCKDNS_DOMAIN }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            IMAGEKIT_PUBLIC_KEY=${{ secrets.IMAGEKIT_PUBLIC_KEY }}
            IMAGEKIT_PRIVATE_KEY=${{ secrets.IMAGEKIT_PRIVATE_KEY }}
            IMAGEKIT_URL_ENDPOINT=${{ secrets.IMAGEKIT_URL_ENDPOINT }}
            ADMIN_EMAILS=${{ secrets.ADMIN_EMAILS }}
            EOF
            
            echo "✅ .env.production.local updated with real production values"
            
            # Validate critical secrets
            if [ -z "${{ secrets.DUCKDNS_DOMAIN }}" ]; then
                echo "❌ DUCKDNS_DOMAIN secret is not set!"
                exit 1
            fi
            
            if [ -z "${{ secrets.GOOGLE_CLIENT_ID }}" ]; then
                echo "❌ GOOGLE_CLIENT_ID secret is not set!"
                exit 1
            fi
            
            # Make deploy script executable
            chmod +x auto-deploy.sh
            
            # Run deployment with error handling
            echo "🚀 Running auto-deploy script..."
            ./auto-deploy.sh || {
                echo "❌ Deployment failed! Checking logs..."
                echo "📋 Docker compose status:"
                docker compose ps || true
                echo "📋 Recent logs:"
                docker compose logs --tail 50 || true
                exit 1
            }
            
            echo "✅ Deployment completed successfully!"

      - name: 🏥 Extended Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: 22
          timeout: 60s
          script: |
            cd ${{ secrets.VPS_PATH }}
            
            echo "⏳ Waiting for services to stabilize..."
            sleep 30
            
            # Check container status
            echo "📋 Container status:"
            docker compose ps
            
            # Test health endpoints
            echo "🔍 Testing health endpoints..."
            
            # HTTP health check
            if curl -f -s http://localhost:3000/health > /dev/null; then
              echo "✅ HTTP health check passed!"
            else
              echo "❌ HTTP health check failed!"
              echo "📋 App logs:"
              docker compose logs --tail 30 app
              exit 1
            fi
            
            # Test database connectivity
            if docker compose exec mysql mysqladmin ping -u root -prootpassword --silent; then
              echo "✅ MySQL connectivity test passed!"
            else
              echo "❌ MySQL connectivity test failed!"
              exit 1
            fi
            
            # Test Redis connectivity
            if docker compose exec redis redis-cli ping | grep -q PONG; then
              echo "✅ Redis connectivity test passed!"
            else
              echo "❌ Redis connectivity test failed!"
              exit 1
            fi
            
            echo "🎉 All health checks passed!"
            echo "🌐 Application is live at: https://${{ secrets.DUCKDNS_DOMAIN }}:3443"