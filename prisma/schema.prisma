generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  googleId        String?           @unique
  email           String            @unique
  name            String
  profilePicture  String?
  isAdmin         Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  studentSubjects StudentSubject[]
  news            News[]
  
  @@map("user")
}

model Subject {
  id              Int               @id @default(autoincrement())
  code            String            @unique @db.VarChar(100)
  name            String            @db.VarChar(100)
  description     String?           @db.Text
  semester        Int
  credits         Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  studentSubjects StudentSubject[]
  learningVideos  LearningVideo[]
  
  @@map("subject")
}

model StudentSubject {
  id         Int      @id @default(autoincrement())
  userId     Int
  subjectId  Int
  enrolledAt DateTime @default(now())
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, subjectId], name: "unique_user_subject")
  @@map("student_subject")
}

model LearningVideo {
  id          Int      @id @default(autoincrement())
  subjectId   Int
  title       String   @db.VarChar(255)
  description String?  @db.Text
  videoUrl    String   @db.VarChar(255)
  duration    Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@map("learning_video")
}

model News {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  content     String   @db.Text
  excerpt     String   @db.Text
  imageUrl    String?  @db.VarChar(255)
  authorId    Int
  category    String   @default("general") @db.VarChar(100)
  isPublished Boolean  @default(true)
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([isPublished, publishedAt], name: "idx_published")
  @@index([category], name: "idx_category")
  @@map("news")
}